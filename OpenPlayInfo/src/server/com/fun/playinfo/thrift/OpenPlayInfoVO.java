/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fun.playinfo.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class OpenPlayInfoVO implements
		org.apache.thrift.TBase<OpenPlayInfoVO, OpenPlayInfoVO._Fields>,
		java.io.Serializable, Cloneable, Comparable<OpenPlayInfoVO> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"OpenPlayInfoVO");

	private static final org.apache.thrift.protocol.TField PLAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"playID", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField VIDEO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"videoID", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField FTYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"ftypeID", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField HASH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"hashID", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fileName", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fileSize", org.apache.thrift.protocol.TType.I64, (short) 6);
	private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"disable", org.apache.thrift.protocol.TType.BOOL, (short) 7);
	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.I32, (short) 8);
	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.I32, (short) 9);
	private static final org.apache.thrift.protocol.TField DEFINITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"definitionID", org.apache.thrift.protocol.TType.I32, (short) 10);
	private static final org.apache.thrift.protocol.TField DEFINITION_VO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"definitionVO", org.apache.thrift.protocol.TType.STRUCT, (short) 11);
	private static final org.apache.thrift.protocol.TField VEDIO_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"vedioTypeID", org.apache.thrift.protocol.TType.I32, (short) 12);
	private static final org.apache.thrift.protocol.TField VEDIO_TYPE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"vedioTypeVO", org.apache.thrift.protocol.TType.STRUCT, (short) 13);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new OpenPlayInfoVOStandardSchemeFactory());
		schemes.put(TupleScheme.class, new OpenPlayInfoVOTupleSchemeFactory());
	}

	public int playID; // required
	public int videoID; // required
	public int ftypeID; // required
	public String hashID; // required
	public String fileName; // required
	public long fileSize; // required
	public boolean disable; // required
	public int updateTime; // required
	public int createTime; // required
	public int definitionID; // required
	public DefinitionVO definitionVO; // required
	public int vedioTypeID; // required
	public FileTypeVO vedioTypeVO; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		PLAY_ID((short) 1, "playID"), VIDEO_ID((short) 2, "videoID"), FTYPE_ID(
				(short) 3, "ftypeID"), HASH_ID((short) 4, "hashID"), FILE_NAME(
				(short) 5, "fileName"), FILE_SIZE((short) 6, "fileSize"), DISABLE(
				(short) 7, "disable"), UPDATE_TIME((short) 8, "updateTime"), CREATE_TIME(
				(short) 9, "createTime"), DEFINITION_ID((short) 10,
				"definitionID"), DEFINITION_VO((short) 11, "definitionVO"), VEDIO_TYPE_ID(
				(short) 12, "vedioTypeID"), VEDIO_TYPE_VO((short) 13,
				"vedioTypeVO");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PLAY_ID
				return PLAY_ID;
			case 2: // VIDEO_ID
				return VIDEO_ID;
			case 3: // FTYPE_ID
				return FTYPE_ID;
			case 4: // HASH_ID
				return HASH_ID;
			case 5: // FILE_NAME
				return FILE_NAME;
			case 6: // FILE_SIZE
				return FILE_SIZE;
			case 7: // DISABLE
				return DISABLE;
			case 8: // UPDATE_TIME
				return UPDATE_TIME;
			case 9: // CREATE_TIME
				return CREATE_TIME;
			case 10: // DEFINITION_ID
				return DEFINITION_ID;
			case 11: // DEFINITION_VO
				return DEFINITION_VO;
			case 12: // VEDIO_TYPE_ID
				return VEDIO_TYPE_ID;
			case 13: // VEDIO_TYPE_VO
				return VEDIO_TYPE_VO;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		@Override
		public short getThriftFieldId() {
			return _thriftId;
		}

		@Override
		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __PLAYID_ISSET_ID = 0;
	private static final int __VIDEOID_ISSET_ID = 1;
	private static final int __FTYPEID_ISSET_ID = 2;
	private static final int __FILESIZE_ISSET_ID = 3;
	private static final int __DISABLE_ISSET_ID = 4;
	private static final int __UPDATETIME_ISSET_ID = 5;
	private static final int __CREATETIME_ISSET_ID = 6;
	private static final int __DEFINITIONID_ISSET_ID = 7;
	private static final int __VEDIOTYPEID_ISSET_ID = 8;
	private short __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.PLAY_ID,
				new org.apache.thrift.meta_data.FieldMetaData("playID",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.VIDEO_ID,
				new org.apache.thrift.meta_data.FieldMetaData("videoID",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FTYPE_ID,
				new org.apache.thrift.meta_data.FieldMetaData("ftypeID",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.HASH_ID,
				new org.apache.thrift.meta_data.FieldMetaData("hashID",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("fileName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE_SIZE,
				new org.apache.thrift.meta_data.FieldMetaData("fileSize",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.DISABLE,
				new org.apache.thrift.meta_data.FieldMetaData("disable",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.UPDATE_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("updateTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CREATE_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("createTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.DEFINITION_ID,
				new org.apache.thrift.meta_data.FieldMetaData("definitionID",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.DEFINITION_VO,
				new org.apache.thrift.meta_data.FieldMetaData("definitionVO",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT,
								DefinitionVO.class)));
		tmpMap.put(_Fields.VEDIO_TYPE_ID,
				new org.apache.thrift.meta_data.FieldMetaData("vedioTypeID",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.VEDIO_TYPE_VO,
				new org.apache.thrift.meta_data.FieldMetaData("vedioTypeVO",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT,
								FileTypeVO.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				OpenPlayInfoVO.class, metaDataMap);
	}

	public OpenPlayInfoVO() {
	}

	public OpenPlayInfoVO(int playID, int videoID, int ftypeID, String hashID,
			String fileName, long fileSize, boolean disable, int updateTime,
			int createTime, int definitionID, DefinitionVO definitionVO,
			int vedioTypeID, FileTypeVO vedioTypeVO) {
		this();
		this.playID = playID;
		setPlayIDIsSet(true);
		this.videoID = videoID;
		setVideoIDIsSet(true);
		this.ftypeID = ftypeID;
		setFtypeIDIsSet(true);
		this.hashID = hashID;
		this.fileName = fileName;
		this.fileSize = fileSize;
		setFileSizeIsSet(true);
		this.disable = disable;
		setDisableIsSet(true);
		this.updateTime = updateTime;
		setUpdateTimeIsSet(true);
		this.createTime = createTime;
		setCreateTimeIsSet(true);
		this.definitionID = definitionID;
		setDefinitionIDIsSet(true);
		this.definitionVO = definitionVO;
		this.vedioTypeID = vedioTypeID;
		setVedioTypeIDIsSet(true);
		this.vedioTypeVO = vedioTypeVO;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public OpenPlayInfoVO(OpenPlayInfoVO other) {
		__isset_bitfield = other.__isset_bitfield;
		this.playID = other.playID;
		this.videoID = other.videoID;
		this.ftypeID = other.ftypeID;
		if (other.isSetHashID()) {
			this.hashID = other.hashID;
		}
		if (other.isSetFileName()) {
			this.fileName = other.fileName;
		}
		this.fileSize = other.fileSize;
		this.disable = other.disable;
		this.updateTime = other.updateTime;
		this.createTime = other.createTime;
		this.definitionID = other.definitionID;
		if (other.isSetDefinitionVO()) {
			this.definitionVO = new DefinitionVO(other.definitionVO);
		}
		this.vedioTypeID = other.vedioTypeID;
		if (other.isSetVedioTypeVO()) {
			this.vedioTypeVO = new FileTypeVO(other.vedioTypeVO);
		}
	}

	@Override
	public OpenPlayInfoVO deepCopy() {
		return new OpenPlayInfoVO(this);
	}

	@Override
	public void clear() {
		setPlayIDIsSet(false);
		this.playID = 0;
		setVideoIDIsSet(false);
		this.videoID = 0;
		setFtypeIDIsSet(false);
		this.ftypeID = 0;
		this.hashID = null;
		this.fileName = null;
		setFileSizeIsSet(false);
		this.fileSize = 0;
		setDisableIsSet(false);
		this.disable = false;
		setUpdateTimeIsSet(false);
		this.updateTime = 0;
		setCreateTimeIsSet(false);
		this.createTime = 0;
		setDefinitionIDIsSet(false);
		this.definitionID = 0;
		this.definitionVO = null;
		setVedioTypeIDIsSet(false);
		this.vedioTypeID = 0;
		this.vedioTypeVO = null;
	}

	public int getPlayID() {
		return this.playID;
	}

	public OpenPlayInfoVO setPlayID(int playID) {
		this.playID = playID;
		setPlayIDIsSet(true);
		return this;
	}

	public void unsetPlayID() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__PLAYID_ISSET_ID);
	}

	/**
	 * Returns true if field playID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPlayID() {
		return EncodingUtils.testBit(__isset_bitfield, __PLAYID_ISSET_ID);
	}

	public void setPlayIDIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__PLAYID_ISSET_ID, value);
	}

	public int getVideoID() {
		return this.videoID;
	}

	public OpenPlayInfoVO setVideoID(int videoID) {
		this.videoID = videoID;
		setVideoIDIsSet(true);
		return this;
	}

	public void unsetVideoID() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__VIDEOID_ISSET_ID);
	}

	/**
	 * Returns true if field videoID is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetVideoID() {
		return EncodingUtils.testBit(__isset_bitfield, __VIDEOID_ISSET_ID);
	}

	public void setVideoIDIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__VIDEOID_ISSET_ID, value);
	}

	public int getFtypeID() {
		return this.ftypeID;
	}

	public OpenPlayInfoVO setFtypeID(int ftypeID) {
		this.ftypeID = ftypeID;
		setFtypeIDIsSet(true);
		return this;
	}

	public void unsetFtypeID() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__FTYPEID_ISSET_ID);
	}

	/**
	 * Returns true if field ftypeID is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFtypeID() {
		return EncodingUtils.testBit(__isset_bitfield, __FTYPEID_ISSET_ID);
	}

	public void setFtypeIDIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__FTYPEID_ISSET_ID, value);
	}

	public String getHashID() {
		return this.hashID;
	}

	public OpenPlayInfoVO setHashID(String hashID) {
		this.hashID = hashID;
		return this;
	}

	public void unsetHashID() {
		this.hashID = null;
	}

	/**
	 * Returns true if field hashID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetHashID() {
		return this.hashID != null;
	}

	public void setHashIDIsSet(boolean value) {
		if (!value) {
			this.hashID = null;
		}
	}

	public String getFileName() {
		return this.fileName;
	}

	public OpenPlayInfoVO setFileName(String fileName) {
		this.fileName = fileName;
		return this;
	}

	public void unsetFileName() {
		this.fileName = null;
	}

	/**
	 * Returns true if field fileName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFileName() {
		return this.fileName != null;
	}

	public void setFileNameIsSet(boolean value) {
		if (!value) {
			this.fileName = null;
		}
	}

	public long getFileSize() {
		return this.fileSize;
	}

	public OpenPlayInfoVO setFileSize(long fileSize) {
		this.fileSize = fileSize;
		setFileSizeIsSet(true);
		return this;
	}

	public void unsetFileSize() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__FILESIZE_ISSET_ID);
	}

	/**
	 * Returns true if field fileSize is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFileSize() {
		return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
	}

	public void setFileSizeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__FILESIZE_ISSET_ID, value);
	}

	public boolean isDisable() {
		return this.disable;
	}

	public OpenPlayInfoVO setDisable(boolean disable) {
		this.disable = disable;
		setDisableIsSet(true);
		return this;
	}

	public void unsetDisable() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__DISABLE_ISSET_ID);
	}

	/**
	 * Returns true if field disable is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDisable() {
		return EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
	}

	public void setDisableIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__DISABLE_ISSET_ID, value);
	}

	public int getUpdateTime() {
		return this.updateTime;
	}

	public OpenPlayInfoVO setUpdateTime(int updateTime) {
		this.updateTime = updateTime;
		setUpdateTimeIsSet(true);
		return this;
	}

	public void unsetUpdateTime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__UPDATETIME_ISSET_ID);
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUpdateTime() {
		return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
	}

	public void setUpdateTimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__UPDATETIME_ISSET_ID, value);
	}

	public int getCreateTime() {
		return this.createTime;
	}

	public OpenPlayInfoVO setCreateTime(int createTime) {
		this.createTime = createTime;
		setCreateTimeIsSet(true);
		return this;
	}

	public void unsetCreateTime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__CREATETIME_ISSET_ID);
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetCreateTime() {
		return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
	}

	public void setCreateTimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__CREATETIME_ISSET_ID, value);
	}

	public int getDefinitionID() {
		return this.definitionID;
	}

	public OpenPlayInfoVO setDefinitionID(int definitionID) {
		this.definitionID = definitionID;
		setDefinitionIDIsSet(true);
		return this;
	}

	public void unsetDefinitionID() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__DEFINITIONID_ISSET_ID);
	}

	/**
	 * Returns true if field definitionID is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDefinitionID() {
		return EncodingUtils.testBit(__isset_bitfield, __DEFINITIONID_ISSET_ID);
	}

	public void setDefinitionIDIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__DEFINITIONID_ISSET_ID, value);
	}

	public DefinitionVO getDefinitionVO() {
		return this.definitionVO;
	}

	public OpenPlayInfoVO setDefinitionVO(DefinitionVO definitionVO) {
		this.definitionVO = definitionVO;
		return this;
	}

	public void unsetDefinitionVO() {
		this.definitionVO = null;
	}

	/**
	 * Returns true if field definitionVO is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDefinitionVO() {
		return this.definitionVO != null;
	}

	public void setDefinitionVOIsSet(boolean value) {
		if (!value) {
			this.definitionVO = null;
		}
	}

	public int getVedioTypeID() {
		return this.vedioTypeID;
	}

	public OpenPlayInfoVO setVedioTypeID(int vedioTypeID) {
		this.vedioTypeID = vedioTypeID;
		setVedioTypeIDIsSet(true);
		return this;
	}

	public void unsetVedioTypeID() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__VEDIOTYPEID_ISSET_ID);
	}

	/**
	 * Returns true if field vedioTypeID is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetVedioTypeID() {
		return EncodingUtils.testBit(__isset_bitfield, __VEDIOTYPEID_ISSET_ID);
	}

	public void setVedioTypeIDIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__VEDIOTYPEID_ISSET_ID, value);
	}

	public FileTypeVO getVedioTypeVO() {
		return this.vedioTypeVO;
	}

	public OpenPlayInfoVO setVedioTypeVO(FileTypeVO vedioTypeVO) {
		this.vedioTypeVO = vedioTypeVO;
		return this;
	}

	public void unsetVedioTypeVO() {
		this.vedioTypeVO = null;
	}

	/**
	 * Returns true if field vedioTypeVO is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetVedioTypeVO() {
		return this.vedioTypeVO != null;
	}

	public void setVedioTypeVOIsSet(boolean value) {
		if (!value) {
			this.vedioTypeVO = null;
		}
	}

	@Override
	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case PLAY_ID:
			if (value == null) {
				unsetPlayID();
			} else {
				setPlayID((Integer) value);
			}
			break;

		case VIDEO_ID:
			if (value == null) {
				unsetVideoID();
			} else {
				setVideoID((Integer) value);
			}
			break;

		case FTYPE_ID:
			if (value == null) {
				unsetFtypeID();
			} else {
				setFtypeID((Integer) value);
			}
			break;

		case HASH_ID:
			if (value == null) {
				unsetHashID();
			} else {
				setHashID((String) value);
			}
			break;

		case FILE_NAME:
			if (value == null) {
				unsetFileName();
			} else {
				setFileName((String) value);
			}
			break;

		case FILE_SIZE:
			if (value == null) {
				unsetFileSize();
			} else {
				setFileSize((Long) value);
			}
			break;

		case DISABLE:
			if (value == null) {
				unsetDisable();
			} else {
				setDisable((Boolean) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			} else {
				setUpdateTime((Integer) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			} else {
				setCreateTime((Integer) value);
			}
			break;

		case DEFINITION_ID:
			if (value == null) {
				unsetDefinitionID();
			} else {
				setDefinitionID((Integer) value);
			}
			break;

		case DEFINITION_VO:
			if (value == null) {
				unsetDefinitionVO();
			} else {
				setDefinitionVO((DefinitionVO) value);
			}
			break;

		case VEDIO_TYPE_ID:
			if (value == null) {
				unsetVedioTypeID();
			} else {
				setVedioTypeID((Integer) value);
			}
			break;

		case VEDIO_TYPE_VO:
			if (value == null) {
				unsetVedioTypeVO();
			} else {
				setVedioTypeVO((FileTypeVO) value);
			}
			break;

		}
	}

	@Override
	public Object getFieldValue(_Fields field) {
		switch (field) {
		case PLAY_ID:
			return Integer.valueOf(getPlayID());

		case VIDEO_ID:
			return Integer.valueOf(getVideoID());

		case FTYPE_ID:
			return Integer.valueOf(getFtypeID());

		case HASH_ID:
			return getHashID();

		case FILE_NAME:
			return getFileName();

		case FILE_SIZE:
			return Long.valueOf(getFileSize());

		case DISABLE:
			return Boolean.valueOf(isDisable());

		case UPDATE_TIME:
			return Integer.valueOf(getUpdateTime());

		case CREATE_TIME:
			return Integer.valueOf(getCreateTime());

		case DEFINITION_ID:
			return Integer.valueOf(getDefinitionID());

		case DEFINITION_VO:
			return getDefinitionVO();

		case VEDIO_TYPE_ID:
			return Integer.valueOf(getVedioTypeID());

		case VEDIO_TYPE_VO:
			return getVedioTypeVO();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	@Override
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case PLAY_ID:
			return isSetPlayID();
		case VIDEO_ID:
			return isSetVideoID();
		case FTYPE_ID:
			return isSetFtypeID();
		case HASH_ID:
			return isSetHashID();
		case FILE_NAME:
			return isSetFileName();
		case FILE_SIZE:
			return isSetFileSize();
		case DISABLE:
			return isSetDisable();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case CREATE_TIME:
			return isSetCreateTime();
		case DEFINITION_ID:
			return isSetDefinitionID();
		case DEFINITION_VO:
			return isSetDefinitionVO();
		case VEDIO_TYPE_ID:
			return isSetVedioTypeID();
		case VEDIO_TYPE_VO:
			return isSetVedioTypeVO();
		}
		throw new IllegalStateException();
	}

	/**
	 * 
	 * 当两个对象的playID相同时，认为两个对象相等.
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object that) {
		boolean equals = false;
		// if (that == null)
		// return false;
		// if (that instanceof OpenPlayInfoVO)
		// return this.equals((OpenPlayInfoVO)that);
		// return false;
		if (that != null) {
			if (that instanceof OpenPlayInfoVO) {
				OpenPlayInfoVO temp = (OpenPlayInfoVO) that;
				if (this.playID == temp.getPlayID()) {
					equals = true;
				}
			}
		}
		return equals;
	}

	public boolean equals(OpenPlayInfoVO that) {
		if (that == null)
			return false;

		boolean this_present_playID = true;
		boolean that_present_playID = true;
		if (this_present_playID || that_present_playID) {
			if (!(this_present_playID && that_present_playID))
				return false;
			if (this.playID != that.playID)
				return false;
		}

		boolean this_present_videoID = true;
		boolean that_present_videoID = true;
		if (this_present_videoID || that_present_videoID) {
			if (!(this_present_videoID && that_present_videoID))
				return false;
			if (this.videoID != that.videoID)
				return false;
		}

		boolean this_present_ftypeID = true;
		boolean that_present_ftypeID = true;
		if (this_present_ftypeID || that_present_ftypeID) {
			if (!(this_present_ftypeID && that_present_ftypeID))
				return false;
			if (this.ftypeID != that.ftypeID)
				return false;
		}

		boolean this_present_hashID = true && this.isSetHashID();
		boolean that_present_hashID = true && that.isSetHashID();
		if (this_present_hashID || that_present_hashID) {
			if (!(this_present_hashID && that_present_hashID))
				return false;
			if (!this.hashID.equals(that.hashID))
				return false;
		}

		boolean this_present_fileName = true && this.isSetFileName();
		boolean that_present_fileName = true && that.isSetFileName();
		if (this_present_fileName || that_present_fileName) {
			if (!(this_present_fileName && that_present_fileName))
				return false;
			if (!this.fileName.equals(that.fileName))
				return false;
		}

		boolean this_present_fileSize = true;
		boolean that_present_fileSize = true;
		if (this_present_fileSize || that_present_fileSize) {
			if (!(this_present_fileSize && that_present_fileSize))
				return false;
			if (this.fileSize != that.fileSize)
				return false;
		}

		boolean this_present_disable = true;
		boolean that_present_disable = true;
		if (this_present_disable || that_present_disable) {
			if (!(this_present_disable && that_present_disable))
				return false;
			if (this.disable != that.disable)
				return false;
		}

		boolean this_present_updateTime = true;
		boolean that_present_updateTime = true;
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (this.updateTime != that.updateTime)
				return false;
		}

		boolean this_present_createTime = true;
		boolean that_present_createTime = true;
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (this.createTime != that.createTime)
				return false;
		}

		boolean this_present_definitionID = true;
		boolean that_present_definitionID = true;
		if (this_present_definitionID || that_present_definitionID) {
			if (!(this_present_definitionID && that_present_definitionID))
				return false;
			if (this.definitionID != that.definitionID)
				return false;
		}

		boolean this_present_definitionVO = true && this.isSetDefinitionVO();
		boolean that_present_definitionVO = true && that.isSetDefinitionVO();
		if (this_present_definitionVO || that_present_definitionVO) {
			if (!(this_present_definitionVO && that_present_definitionVO))
				return false;
			if (!this.definitionVO.equals(that.definitionVO))
				return false;
		}

		boolean this_present_vedioTypeID = true;
		boolean that_present_vedioTypeID = true;
		if (this_present_vedioTypeID || that_present_vedioTypeID) {
			if (!(this_present_vedioTypeID && that_present_vedioTypeID))
				return false;
			if (this.vedioTypeID != that.vedioTypeID)
				return false;
		}

		boolean this_present_vedioTypeVO = true && this.isSetVedioTypeVO();
		boolean that_present_vedioTypeVO = true && that.isSetVedioTypeVO();
		if (this_present_vedioTypeVO || that_present_vedioTypeVO) {
			if (!(this_present_vedioTypeVO && that_present_vedioTypeVO))
				return false;
			if (!this.vedioTypeVO.equals(that.vedioTypeVO))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int result = this.playID;
		result = 31 * result;
		return result;
	}

	@Override
	public int compareTo(OpenPlayInfoVO other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetPlayID()).compareTo(
				other.isSetPlayID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPlayID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.playID, other.playID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetVideoID()).compareTo(
				other.isSetVideoID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVideoID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.videoID, other.videoID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFtypeID()).compareTo(
				other.isSetFtypeID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFtypeID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.ftypeID, other.ftypeID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetHashID()).compareTo(
				other.isSetHashID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHashID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.hashID, other.hashID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFileName()).compareTo(
				other.isSetFileName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFileName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.fileName, other.fileName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(
				other.isSetFileSize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFileSize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.fileSize, other.fileSize);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDisable()).compareTo(
				other.isSetDisable());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDisable()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.disable, other.disable);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(
				other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(
				other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDefinitionID()).compareTo(
				other.isSetDefinitionID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDefinitionID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.definitionID, other.definitionID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDefinitionVO()).compareTo(
				other.isSetDefinitionVO());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDefinitionVO()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.definitionVO, other.definitionVO);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetVedioTypeID()).compareTo(
				other.isSetVedioTypeID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVedioTypeID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.vedioTypeID, other.vedioTypeID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetVedioTypeVO()).compareTo(
				other.isSetVedioTypeVO());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVedioTypeVO()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.vedioTypeVO, other.vedioTypeVO);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@Override
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	@Override
	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	@Override
	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("OpenPlayInfoVO(");
		boolean first = true;

		sb.append("playID:");
		sb.append(this.playID);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("videoID:");
		sb.append(this.videoID);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("ftypeID:");
		sb.append(this.ftypeID);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("hashID:");
		if (this.hashID == null) {
			sb.append("null");
		} else {
			sb.append(this.hashID);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("fileName:");
		if (this.fileName == null) {
			sb.append("null");
		} else {
			sb.append(this.fileName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("fileSize:");
		sb.append(this.fileSize);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("disable:");
		sb.append(this.disable);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		sb.append(this.updateTime);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		sb.append(this.createTime);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("definitionID:");
		sb.append(this.definitionID);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("definitionVO:");
		if (this.definitionVO == null) {
			sb.append("null");
		} else {
			sb.append(this.definitionVO);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("vedioTypeID:");
		sb.append(this.vedioTypeID);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("vedioTypeVO:");
		if (this.vedioTypeVO == null) {
			sb.append("null");
		} else {
			sb.append(this.vedioTypeVO);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (definitionVO != null) {
			definitionVO.validate();
		}
		if (vedioTypeVO != null) {
			vedioTypeVO.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OpenPlayInfoVOStandardSchemeFactory implements
			SchemeFactory {
		@Override
		public OpenPlayInfoVOStandardScheme getScheme() {
			return new OpenPlayInfoVOStandardScheme();
		}
	}

	private static class OpenPlayInfoVOStandardScheme extends
			StandardScheme<OpenPlayInfoVO> {

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot,
				OpenPlayInfoVO struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PLAY_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.playID = iprot.readI32();
						struct.setPlayIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // VIDEO_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.videoID = iprot.readI32();
						struct.setVideoIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // FTYPE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.ftypeID = iprot.readI32();
						struct.setFtypeIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // HASH_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.hashID = iprot.readString();
						struct.setHashIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 5: // FILE_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fileName = iprot.readString();
						struct.setFileNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 6: // FILE_SIZE
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.fileSize = iprot.readI64();
						struct.setFileSizeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 7: // DISABLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.disable = iprot.readBool();
						struct.setDisableIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 8: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.updateTime = iprot.readI32();
						struct.setUpdateTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 9: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.createTime = iprot.readI32();
						struct.setCreateTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 10: // DEFINITION_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.definitionID = iprot.readI32();
						struct.setDefinitionIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 11: // DEFINITION_VO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.definitionVO = new DefinitionVO();
						struct.definitionVO.read(iprot);
						struct.setDefinitionVOIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 12: // VEDIO_TYPE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.vedioTypeID = iprot.readI32();
						struct.setVedioTypeIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 13: // VEDIO_TYPE_VO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.vedioTypeVO = new FileTypeVO();
						struct.vedioTypeVO.read(iprot);
						struct.setVedioTypeVOIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot,
				OpenPlayInfoVO struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(PLAY_ID_FIELD_DESC);
			oprot.writeI32(struct.playID);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(VIDEO_ID_FIELD_DESC);
			oprot.writeI32(struct.videoID);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(FTYPE_ID_FIELD_DESC);
			oprot.writeI32(struct.ftypeID);
			oprot.writeFieldEnd();
			if (struct.hashID != null) {
				oprot.writeFieldBegin(HASH_ID_FIELD_DESC);
				oprot.writeString(struct.hashID);
				oprot.writeFieldEnd();
			}
			if (struct.fileName != null) {
				oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
				oprot.writeString(struct.fileName);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
			oprot.writeI64(struct.fileSize);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DISABLE_FIELD_DESC);
			oprot.writeBool(struct.disable);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
			oprot.writeI32(struct.updateTime);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
			oprot.writeI32(struct.createTime);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DEFINITION_ID_FIELD_DESC);
			oprot.writeI32(struct.definitionID);
			oprot.writeFieldEnd();
			if (struct.definitionVO != null) {
				oprot.writeFieldBegin(DEFINITION_VO_FIELD_DESC);
				struct.definitionVO.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(VEDIO_TYPE_ID_FIELD_DESC);
			oprot.writeI32(struct.vedioTypeID);
			oprot.writeFieldEnd();
			if (struct.vedioTypeVO != null) {
				oprot.writeFieldBegin(VEDIO_TYPE_VO_FIELD_DESC);
				struct.vedioTypeVO.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OpenPlayInfoVOTupleSchemeFactory implements
			SchemeFactory {
		@Override
		public OpenPlayInfoVOTupleScheme getScheme() {
			return new OpenPlayInfoVOTupleScheme();
		}
	}

	private static class OpenPlayInfoVOTupleScheme extends
			TupleScheme<OpenPlayInfoVO> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				OpenPlayInfoVO struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetPlayID()) {
				optionals.set(0);
			}
			if (struct.isSetVideoID()) {
				optionals.set(1);
			}
			if (struct.isSetFtypeID()) {
				optionals.set(2);
			}
			if (struct.isSetHashID()) {
				optionals.set(3);
			}
			if (struct.isSetFileName()) {
				optionals.set(4);
			}
			if (struct.isSetFileSize()) {
				optionals.set(5);
			}
			if (struct.isSetDisable()) {
				optionals.set(6);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(7);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(8);
			}
			if (struct.isSetDefinitionID()) {
				optionals.set(9);
			}
			if (struct.isSetDefinitionVO()) {
				optionals.set(10);
			}
			if (struct.isSetVedioTypeID()) {
				optionals.set(11);
			}
			if (struct.isSetVedioTypeVO()) {
				optionals.set(12);
			}
			oprot.writeBitSet(optionals, 13);
			if (struct.isSetPlayID()) {
				oprot.writeI32(struct.playID);
			}
			if (struct.isSetVideoID()) {
				oprot.writeI32(struct.videoID);
			}
			if (struct.isSetFtypeID()) {
				oprot.writeI32(struct.ftypeID);
			}
			if (struct.isSetHashID()) {
				oprot.writeString(struct.hashID);
			}
			if (struct.isSetFileName()) {
				oprot.writeString(struct.fileName);
			}
			if (struct.isSetFileSize()) {
				oprot.writeI64(struct.fileSize);
			}
			if (struct.isSetDisable()) {
				oprot.writeBool(struct.disable);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeI32(struct.updateTime);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeI32(struct.createTime);
			}
			if (struct.isSetDefinitionID()) {
				oprot.writeI32(struct.definitionID);
			}
			if (struct.isSetDefinitionVO()) {
				struct.definitionVO.write(oprot);
			}
			if (struct.isSetVedioTypeID()) {
				oprot.writeI32(struct.vedioTypeID);
			}
			if (struct.isSetVedioTypeVO()) {
				struct.vedioTypeVO.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				OpenPlayInfoVO struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(13);
			if (incoming.get(0)) {
				struct.playID = iprot.readI32();
				struct.setPlayIDIsSet(true);
			}
			if (incoming.get(1)) {
				struct.videoID = iprot.readI32();
				struct.setVideoIDIsSet(true);
			}
			if (incoming.get(2)) {
				struct.ftypeID = iprot.readI32();
				struct.setFtypeIDIsSet(true);
			}
			if (incoming.get(3)) {
				struct.hashID = iprot.readString();
				struct.setHashIDIsSet(true);
			}
			if (incoming.get(4)) {
				struct.fileName = iprot.readString();
				struct.setFileNameIsSet(true);
			}
			if (incoming.get(5)) {
				struct.fileSize = iprot.readI64();
				struct.setFileSizeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.disable = iprot.readBool();
				struct.setDisableIsSet(true);
			}
			if (incoming.get(7)) {
				struct.updateTime = iprot.readI32();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.createTime = iprot.readI32();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.definitionID = iprot.readI32();
				struct.setDefinitionIDIsSet(true);
			}
			if (incoming.get(10)) {
				struct.definitionVO = new DefinitionVO();
				struct.definitionVO.read(iprot);
				struct.setDefinitionVOIsSet(true);
			}
			if (incoming.get(11)) {
				struct.vedioTypeID = iprot.readI32();
				struct.setVedioTypeIDIsSet(true);
			}
			if (incoming.get(12)) {
				struct.vedioTypeVO = new FileTypeVO();
				struct.vedioTypeVO.read(iprot);
				struct.setVedioTypeVOIsSet(true);
			}
		}
	}

}

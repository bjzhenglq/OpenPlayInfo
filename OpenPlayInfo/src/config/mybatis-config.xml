<?xml version="1.0" encoding="UTF-8" ?>     
<!DOCTYPE configuration     
    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"     
    "http://mybatis.org/dtd/mybatis-3-config.dtd">
    
<configuration>

	<!-- mybatis文件的配置是有顺序约束的，书序为properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,
		plugins?,environments?,databaseIdProvider?,mappers ，如果顺序错了，加载时会报错，需要注意。-->
	<!-- 属性文件配置 -->
	<properties resource="mybatis.properties"  />
	
	<settings>
		<!--对在此配置文件下的所有cache 进行全局性开/关设置。 default="false" -->
		<setting name="cacheEnabled" value="true" />
		<!--全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载。 default="true" -->
		<setting name="lazyLoadingEnabled" value="true" />
		<!--允许和不允许单条语句返回多个数据集（取决于驱动需求） default="true" -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<!--使用列标签代替列名称。不同的驱动器有不同的作法。参考一下驱动器文档，或者用这两个不同的选项进行测试一下。 default="true" -->
		<setting name="useColumnLabel" value="true" />
		<!--允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default="false" -->
		<setting name="useGeneratedKeys" value="false" />
		<!--配置和设定执行器，SIMPLE 执行器执行其它语句。REUSE 执行器可能重复使用prepared statements 语句，BATCH执行器可以重复执行语句和批量更新。 
			default="SIMPLE" -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		<!--设置一个时限，以决定让驱动器等待数据库回应的多长时间为超时 default="Not Set" -->
<!-- 		<setting name="defaultStatementTimeout" value="50000" /> -->
	</settings>

	<!--设置别名 -->
	<typeAliases>
		<typeAlias alias="OpenPlayInfoVO" type="com.fun.playinfo.thrift.OpenPlayInfoVO" />
		<typeAlias alias="FileTypeVO" type="com.fun.playinfo.thrift.FileTypeVO" />
		<typeAlias alias="DefinitionVO" type="com.fun.playinfo.thrift.DefinitionVO" />
	</typeAliases>

	<!-- 重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型 -->
	<!-- <typeHandlers> -->
	<!-- <typeHandler javaType="String" jdbcType="VARCHAR" handler="com.fun.mybatis.handler.LimingStringTypeHandler"/> -->
	<!-- </typeHandlers> -->
	
	<!-- 	<objectFactory type=""></objectFactory> -->

	<!-- <objectWrapperFactory type=""></objectWrapperFactory> -->

	<!-- <plugins></plugins> -->

	<!--数据源配置 这块用 mysql数据库 -->
	<environments default="development">
		<environment id="read">
			<transactionManager type="jdbc" />
			<dataSource type="POOLED">
				<property name="driver" value="${read_driver}" />
				<property name="url" value="${read_url}" />
				<property name="username" value="${read_username}" />
				<property name="password" value="${read_password}" />
			</dataSource>
		</environment>
		<environment id="write">
			<transactionManager type="jdbc" />
			<dataSource type="POOLED">
				<property name="driver" value="{write_driver}" />
				<property name="url" value="${write_url}" />
				<property name="username" value="${write_username}" />
				<property name="password" value="${write_password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!--<databaseIdProvider type=""></databaseIdProvider> -->
	
	<mappers>
		<!--userMapper.xml装载进来 同等于把“dao”的实现装载进来 -->
		<mapper resource="myBatis/playInfoMapper.xml" />
		<mapper resource="myBatis/fileTypeMapper.xml" />
		<mapper resource="myBatis/definitionMapper.xml" />
	</mappers>
</configuration> 